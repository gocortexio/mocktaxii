# MockTAXII v0.6.0 - Production Docker Compose Configuration
# Advanced production setup with security, monitoring, and SSL

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://mocktaxii:${POSTGRES_PASSWORD}@db:5432/mocktaxii
      - SESSION_SECRET=${SESSION_SECRET}
      - WTF_CSRF_ENABLED=true
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mocktaxii-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mocktaxii.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.mocktaxii.tls=true"
      - "traefik.http.routers.mocktaxii.tls.certresolver=letsencrypt"
      - "traefik.http.services.mocktaxii.loadbalancer.server.port=5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mocktaxii
      - POSTGRES_USER=mocktaxii
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mocktaxii"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - mocktaxii-network
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - mocktaxii-network
    security_opt:
      - no-new-privileges:true

  traefik:
    image: traefik:v2.10
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
      - traefik_logs:/var/log/traefik
    restart: unless-stopped
    networks:
      - mocktaxii-network
    security_opt:
      - no-new-privileges:true

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - mocktaxii-network
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  traefik_logs:
    driver: local
  letsencrypt_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  mocktaxii-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16